###_*_*_*_*_*_*_*_*_*_*_*_*_Makefile_minishell_*_*_*_*_*_*_*_*_*_*_*_*_###^M$
###-------------------------# VARIABLES ##-------------------------###^M$
NAME = minishell^M$
^M$
SRCS_FILES 		=	built_ins/cd_pwd.c					\^M$
					built_ins/unset_export_env_echo.c	\^M$
					execution/check_heredoc.c			\^M$
					execution/exec_simp_cmd.c			\^M$
					execution/heredocs.c 				\^M$
					execution/minishell.c				\^M$
					execution/pipes.c					\^M$
					execution/quit.c					\^M$
					execution/redirection.c				\^M$
					execution/set_groups.c 				\^M$
					execution/syntax_error.c			\^M$
					execution/variables.c 				\^M$
					parsing/init_token.c				\^M$
					parsing/newtoken.c					\^M$
					parsing/token_op.c					\^M$
					parsing/tokenize.c					\^M$
^M$
INCLUDE_FILES	= 	minishell.h^M$
^M$
LIBS = include/libft/libft.a^M$
^M$
### Repertoires ###^M$
SRCS_DIR 	= srcs/^M$
OBJS_DIR	= objs/^M$
INCLUDE_DIR = include/^M$
^M$
## Naming files ##^M$
OBJS 		= $(SRCS_FILES:.c=.o)^M$
OBJS_IN_DIR	= $(addprefix $(OBJS_DIR), $(OBJS))^M$
SRCS 		= $(addprefix $(SRCS_DIR), $(SRCS_FILES))^M$
INCLUDE 	= $(addprefix $(INCLUDE_DIR), $(INCLUDE_FILES))^M$
^M$
### Colour var ###^M$
CLEAR_LINE		= \033[2K^M$
CURSOR_UP_1		= \033[1A^M$
CURSOR_UP		= \033[2A^M$
CURSOR_DOWN		= \033[1B^M$
CURSOR_FORWARD	= \033[1C^M$
CURSOR_BACK  	= \033[1D^M$
^M$
END				= \033[0m^M$
BOLD			= \033[1m^M$
ITALIC			= \033[3m^M$
URL				= \033[4m^M$
BLINK			= \033[5m^M$
BLINK2			= \033[6m^M$
SELECTED		= \033[7m^M$
^M$
BLACK			= \033[30m^M$
RED				= \033[31m^M$
GREEN			= \033[32m^M$
YELLOW			= \033[33m^M$
BLUE			= \033[34m^M$
VIOLET			= \033[35m^M$
CYAN			= \033[36m^M$
WHITE			= \033[37m^M$
^M$
READLINE = -lreadline -I /usr/local/opt/readline/include -L ~/.brew/opt/readline/lib -I ~/.brew/opt/readline/include^M$
### Compilations et archivage ###^M$
CC 			= gcc^M$
CFLAGS 		= -g -Wall -Wextra -Werror ^M$
### Autres Fonctions ###^M$
NORMINETTE 	= norminette^M$
###------------------------## LEAK CHECK ##------------------------###^M$
LEAK = leaks -q --atExit -- ./minishell^M$
VALGRING = valgrind --track-fds=yes --track-origins=yes  --leak-check=full ./minishell^M$
###--------------------------## REGLES ##--------------------------###^M$
all: $(NAME)^M$
^M$
$(NAME) : libft $(OBJS_IN_DIR)^M$
	@echo "$(CURSOR_UP_1)$(CLEAR_LINE)$(GREEN)Compiling DONE! ‚M-^\M-^E$(END)"^M$
	@$(CC) $(CFLAGS) $(OBJS_IN_DIR) $(LIBS) $(READLINE) -o $@ ^M$
	@echo "$(BLUE)$(CLEAR_LINE)Executable $(NAME) created$(END)"^M$
	@echo "----------------------------"^M$
^M$
$(OBJS_DIR)%.o : $(SRCS_DIR)%.c^M$
# @echo "$(CLEAR_LINE)$(SELECTED)MINISHELL$(END)"^M$
	@echo "$(CURSOR_UP_1)$(CLEAR_LINE)Compiling $<"^M$
	@$(CC) -I ~/.brew/opt/readline/include -I /usr/local/opt/readline/include $(CFLAGS) -c $< -o $@^M$
^M$
libft:^M$
	@mkdir -p .tmp^M$
	@mkdir -p $(OBJS_DIR)^M$
	@mkdir -p $(OBJS_DIR)/parsing^M$
	@mkdir -p $(OBJS_DIR)/execution^M$
	@mkdir -p $(OBJS_DIR)/built_ins^M$
	@$(MAKE) -sC include/libft^M$
	@echo "$(CURSOR_UP)$(CLEAR_LINE)$(SELECTED)MINISHELL$(END)"^M$
	@echo " "^M$
clean:^M$
	@$(MAKE) -sC include/libft clean^M$
	@rm -f *.o^M$
	@rm -rf $(OBJS_DIR)^M$
	@echo "MINISHELL	| $(CYAN)OBJECTS CLEANED$(END)"^M$
^M$
fclean:	clean^M$
	@$(MAKE) -sC include/libft fclean^M$
	@rm -rf $(NAME)^M$
	@echo "MINISHELL	| $(BLUE)EXECUTABLE CLEANED$(END)"^M$
^M$
leak:^M$
	$(LEAK)^M$
^M$
valgrind:^M$
	valgrind --track-fds=yes --track-origins=yes  --leak-check=full ./minishell^M$
^M$
re:	fclean all ^M$
	./$(NAME)^M$
^M$
rew: ^M$
	@echo " "^M$
	@echo " "^M$
	@rm -rf $(NAME)^M$
	@rm -f *.o^M$
	@rm -rf $(OBJS_DIR)^M$
	@$(MAKE) -s $(NAME)^M$
# ./$(NAME)^M$
^M$
help:^M$
	@echo "Rules: all clean fclean re"^M$
^M$
